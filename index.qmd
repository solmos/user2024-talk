---
title: "Building large-scale simulation pipelines using targets, Git and GitHub Actions"
subtitle: "useR! 2024 Salzburg"
author: "Sergio Olmos"
date: "11 July 2024"
format:
  revealjs:
    slide-number: true
    logo: sanofi.svg
    theme: [default, custom.scss]
    mermaid:
      theme: default
---

## About

:::: {.columns}

::: {.column width="60%"}
- Statistician at Sanofi

- Innovative clinical trial designs and analytical methods

- Large scale simulations

- Software engineering best practices

- Member of [openstatsware](https://www.openstatsware.org)

:::

::: {.column width="40%"}

![](sanofi.svg)

![](openstatsware-hex.svg){.absolute left="730" width="200"}
:::

::::

# Overview

## Tools

- {targets}

- Docker

- Git

- GitHub Actions

## Workflow

```{mermaid}
flowchart TB
  subgraph Local
  dev[Pipeline development] <--> test[Small scale simulations]
  end
  subgraph ghr[GitHub Runner]
  gha[GitHub Actions] --> docker[Build Docker image]
  gha --> deploy[Deploy pipeline]
  deploy --> publish[Publish results]
  subgraph HPC
  sim --> report[Render report]
  end
  end
  deploy --> sim[Large scale simulations]
  report --> publish
  Local --> ghr
```

# {targets}

## Pipeline management

- Analyzes pipeline graph
- Skips up-to-date steps
- Orchestrates the rest
- Automatic saving of targets

![](targets-pipeline-simple.png)

## R-based

``` r
# _targets.R
library(targets)
tar_option_set(
  packages = c("dplyr", "ggplot2")
)

list(
  tar_target(
    name = data_sim,
    command = sim_data(reps = 100)
  ),
  tar_target(
    name = model_fit,
    command = fit_model(data_sim)
  )
)
```

Run entire pipeline with:

``` r
targets::tar_make()
```

## Parallelization via {crew}

``` r
# _targets.R
library(crew)
tar_option_set(controller = crew_controller_local(workers = 30))
```

- Dynamic branching
  - {tarchetypes}

- Distributed computing:
  - Local
  - SGE
  - SLURM
  - AWS Batch

![](targets-pipeline-complex.png){.absolute height="500px" left="600" top="200"}

## Seamless testing-deployment workflow via {config}

`config.yaml`

``` yaml
default:
  sims: 100
  workers: 2
deployment:
  sims: 10000
  workers: 30
```

`_targets.R`

``` r
n_sims <- config::get("sims")
n_workers <- config::get("workers")
tar_option_set(crew_controller_local(workers = n_workers))
list(
  tar_target(data_sim, sim_data(reps = n_sims))
)
```

# Cloud computing

## Cloud computing platform

- On-demand AWS EC2 instances via API

- Custom Docker image

- Access to S3 buckets for persistent storage

- Choose HPC scheduler: SLURM, SGE, Kubernetes

- Live pipeline logs

# Docker

## Install all pipeline requirements

Production environment:

- Base images: [Rocker Project](https://rocker-project.org)
- System dependencies
- R version
- R packages

# GitHub Actions

## What are GitHub Actions?

- Workflow automation: CI/CD
- Runners:
  - GitHub-shared
  - Self-hosted
- Traceability
- Collaboration

# Workflow

## Before CI/CD

- Manually moving files
- Working in ineffient mounted folders
- Running costly cloud instance for long periods of time (mostly iddle)
- Interactive testing in the command line
- Non-traceability of results

## After CI/CD

:::: {.columns}

::: {.column}

**Local development**:

- Free
- Offline
- Your development environment
  - Desktop IDE
  - Git client
- Interactive testing

:::

::: {.column}

**Automated pipeline deployment**:

- No manual file movement

- Traceable

- Efficient use of costly cloud computing

:::

::::

## Step 1: Build image

- Trigger workflow only when changes in:
  - `Dockerfile`
  - Dependencies (e.g., `renv.lock`)
  
- Build image in GitHub runners

- Push image to cloud computing registry

## Step 2: Deploy pipeline

- Custom trigger:
  - `git push <deploy-branch>`
  - `git tag`
  
- Custom GitHub Action:
  - Specify Docker image
  - Specify HPC specs
  - Automatated `git checkout`
  - Pipeline execution command

## Deployment example

```yaml
name: Deploy pipeline
on:
  push:
    branches: deploy
jobs:
  deploy-pipeline:
    runs-on: self-hosted
    steps:
      - name: Run pipeline
        uses: org/custom-github-action/run-pipeline@main
        with:
          token: ${{ secrets.API_TOKEN }}
          docker-image: user/custom-docker-image:latest
          instance-type: r6i.32xlarge
          command: sh _deploy.sh # targets::tar_make()
```

## Step 3: Publish results

After deployment workflow:

- targets pipeline includes Quarto/RMarkdown documents reporting results

``` r
tarchetypes::tar_quarto(report, "report.qmd")
```

- Publish rendered HTML to GitHub Pages/Posit Connect
- See results
- Share with collaborators

# Thanks! Questions? {.smaller}

{{< fa solid envelope >}} [`sergio.olmos.pardo@gmail.com`](mailto:sergio.olmos.pardo@gmail.com)

{{< fa brands github >}} [`solmos`](https://github.com/solmos)

{{< fa brands linkedin >}} [`sergio-olmos`](https://www.linkedin.com/in/sergio-olmos)

{{< fa brands mastodon >}} [`@solmos@fosstodon.org`](https://fosstodon.org/@solmos)


::: footer

Slides: [`https://github.com/solmos/user2024-talk`](https://github.com/solmos/user2024-talk)

:::
